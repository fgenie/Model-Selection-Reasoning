# zeroshot worked great already.
system_msg: You are a skilled programmer who enjoys sharing your code solution that solves the question efficiently. You write a python code that explains the code with the docstring so that others might easy to follow. You are known for posting your code only to the question that has only docstring but self-inclusive enough to follow (i.e. if you are done with coding, stop writing more). Now, complete the code of yours to provide answer.

user_template: |
  {QUESTION}

user_template_fewshot: |
  <example>
  {NEWLINE2_FEWSHOTS}
  </example>

  {QUESTION}

assistant_start: |
  # solution in Python:


  def solution():
      '''{PROCESSEDPLAN}'''

fewshots:
- "Question: Olivia has $23. She bought five bagels for $3 each. How much money does\
  \ she have left?\n# solution in Python:\n\n\ndef solution():\n    \"\"\"\n    1.\
  \ Check how much money Olivia had at first, and store it into some variable.\n \
  \   2. She's consuming it to buy bagels. You can subtract the cost of bagel multiplied\
  \ by number of bagels to figure out how much did she consume.\n    3. Subtract the\
  \ cost from initial deposit.\n    4. Return the calculated number.\n    \"\"\"\n\
  \    # Olivia's initial deposit\n    initial_deposit = 23\n\n    # Cost of each\
  \ bagel\n    bagel_cost = 3\n\n    # Number of bagels bought\n    num_bagels = 5\n\
  \n    # Calculate the total cost of the bagels\n    total_cost = bagel_cost * num_bagels\n\
  \n    # Calculate the remaining money\n    remaining_money = initial_deposit - total_cost\n\
  \n    # Return the remaining money\n    return remaining_money\n\n# Test the solution\n\
  # print(solution())\n"
- "Question: Find the prime number that is larger than 11.\n# solution in Python:\n\
  \n\ndef solution():\n    \"\"\"\n    1. Start by setting a variable `num` to the\
  \ value 12, since we want the number to be larger than 11.\n    2. Create a while\
  \ loop that repeats until we find a prime number.\n    3. Inside the loop, create\
  \ a helper function `is_prime(n)` that checks if a number is prime.\n    4. Starting\
  \ from `num`, increment `num` by 1 in each iteration of the loop.\n    5. Inside\
  \ the loop, check if `num` is prime using the `is_prime()` function.\n    6. If\
  \ `num` is prime, break out of the loop.\n    7. After the loop, `num` will be the\
  \ prime number that is larger than 11.\n    8. Return the value of `num`.\n    \"\
  \"\"\n    num = 12\n\n    def is_prime(n):\n        '''\n        Helper function\
  \ to check if a number is prime.\n        '''\n        if n <= 1:\n            return\
  \ False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i ==\
  \ 0:\n                return False\n        return True\n\n    while True:\n   \
  \     num += 1\n        if is_prime(num):\n            break\n\n    return num\n\
  \n# Testing the solution\n# print(solution())"
- "Question: There were nine computers in the server room. Five more computers were\
  \ installed each day, from monday to thursday. How many computers are now in the\
  \ server room?\n# solution in Python:\n\n\ndef solution():\n    \"\"\"\n    1. Start\
  \ with the initial number of computers in the server room and store it in a variable.\n\
  \    2. Create a loop to iterate over the four days - Monday to Thursday.\n    3.\
  \ Inside the loop, add five to the current number of computers in the server room\
  \ to account for the new installations.\n    4. After the loop, return the final\
  \ number of computers in the server room.\n    \"\"\"\n    # Start with the initial\
  \ number of computers in the server room\n    computers = 9\n\n    # Iterate over\
  \ the four days - Monday to Thursday\n    for _ in range(4):\n        # Add five\
  \ to the current number of computers in the server room\n        computers += 5\n\
  \n    # Return the final number of computers in the server room\n    return computers\n\
  \n# Test the solution\n# print(solution())"
- "Question: 235*12=?\n# solution in Python:\n\n\ndef solution():\n    '''\n    1.\
  \ Multiply the first number, 235, by the second number, 12.\n    2. Return the calculated\
  \ product.\n    '''\n    product = 235 * 12\n    return product"
- "Question: There are 15 trees in the grove. Grove workers will plant trees in the\
  \ grove today. After they are done, there will be 21 trees. How many trees did the\
  \ grove workers plant today?\n# solution in Python:\n\n\ndef solution():\n    \"\
  \"\"\n    1. Take note of the initial number of trees in the grove and store it\
  \ in a variable.\n    2. Subtract the initial number of trees from the final number\
  \ of trees after the workers have planted.\n    3. Return the result of the subtraction,\
  \ which represents the number of trees the workers planted today.\n    \"\"\"\n\
  \    initial_trees = 15\n    final_trees = 21\n\n    trees_planted = final_trees\
  \ - initial_trees\n\n    return trees_planted\n\n# Testing the solution\n# print(solution())"
- "Question: If we list all the natural numbers below 10 that are multiples of 3 or\
  \ 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all\
  \ the multiples of 3 or 5 below 1000.\n# solution in Python:\n\n\ndef solution():\n\
  \    \"\"\"\n    1. Create a variable to keep track of the sum, initialized to 0.\n\
  \    2. Loop through all the natural numbers below 1000.\n    3. Check if the number\
  \ is a multiple of 3 or 5.\n    4. If it is, add the number to the sum variable.\n\
  \    5. Repeat steps 3 and 4 for all the natural numbers.\n    6. After the loop\
  \ ends, return the sum. \n    \"\"\"\n    # Create a variable to keep track of the\
  \ sum, initialized to 0.\n    sum_of_multiples = 0\n\n    # Loop through all the\
  \ natural numbers below 1000.\n    for num in range(1000):\n        # Check if the\
  \ number is a multiple of 3 or 5.\n        if num % 3 == 0 or num % 5 == 0:\n  \
  \          # If it is, add the number to the sum variable.\n            sum_of_multiples\
  \ += num\n\n    # Return the sum of all the multiples of 3 or 5 below 1000.\n  \
  \  return sum_of_multiples\n\n# Call the solution function and print the result.\n\
  # print(solution())"
